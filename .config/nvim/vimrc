" ---------------------------------------------------
"		      General
" ---------------------------------------------------

set background=light

" make it so that vimrc updates immediately after saving
if !has('nvim')
	autocmd bufwritepost .vimrc source ~/.vimrc
endif

set encoding=UTF-8

" who would care about vi compatibility anyway
set nocompatible

" prevent entering Ex mode
nnoremap Q <nop>

" highlighting settings
set hls
nnoremap <esc> :noh<return><esc>
nnoremap <esc>^[ <esc>^[
set smartcase

" settings regarding whether to use relative or absolute line numbers
set number relativenumber
:au FocusLost * :set norelativenumber number
:au FocusGained * :set number relativenumber
autocmd InsertEnter * :set norelativenumber number
autocmd InsertLeave * :set number relativenumber

" syntax highlighting
syntax on

" Show error at over 80 characters (kernel dev)
highlight ColorColumn ctermbg=magenta
call matchadd('ColorColumn', '\%81v', 100)

" One tab 8 characters wide
set tabstop=8
set shiftwidth=8

" Do not expand comments on new line
au FileType * set fo-=c fo-=r fo-=o

if !has('nvim')
	" refresh frequency for gitgutter
	set updatetime=100
endif

" Stop messing with newlines at the end of file all the time
set nofixendofline

" Paste directly from keyboard using p
set clipboard=unnamed

" Cursorline
set cursorline

" ---------------------------------------------------
"		       Plugins
" ---------------------------------------------------

call plug#begin('~/.vim/plugged')

" Editor additions
Plug 'tpope/vim-surround'

" (In)Convenience
Plug 'takac/vim-hardtime'
Plug 'ntpeters/vim-better-whitespace'

" Buffer management
Plug 'moll/vim-bbye'

" Proper indentation
Plug 'tpope/vim-sleuth'

" Minimap
Plug 'wfxr/minimap.vim', {'do': ':!cargo install --locked code-minimap'}

if has('nvim')
	" LSP
	Plug 'neovim/nvim-lspconfig'

	" Auto completion
	Plug 'hrsh7th/nvim-cmp'
	Plug 'hrsh7th/cmp-nvim-lsp'
	Plug 'hrsh7th/cmp-nvim-lua'
	Plug 'hrsh7th/cmp-buffer'
	Plug 'hrsh7th/cmp-path'
	Plug 'hrsh7th/cmp-cmdline'

	Plug 'ray-x/lsp_signature.nvim'

	" Snippets (needed for completion)
	Plug 'hrsh7th/cmp-vsnip'
	Plug 'hrsh7th/vim-vsnip'

	" Color scheme
	Plug 'savq/melange'

	" Treesitter
	Plug 'nvim-treesitter/nvim-treesitter', {'do': ':TSUpdate'}
	Plug 'nvim-treesitter/nvim-treesitter-context'

	" Mappings helper
	Plug 'folke/which-key.nvim'

	" Telescope
	Plug 'nvim-lua/popup.nvim'
	Plug 'nvim-lua/plenary.nvim'
	Plug 'nvim-telescope/telescope.nvim'
	Plug 'nvim-telescope/telescope-fzy-native.nvim'
	Plug 'kyazdani42/nvim-web-devicons'

	" Statusline
	Plug 'nvim-lualine/lualine.nvim'

	" Auto close brackets
	Plug 'windwp/nvim-autopairs'

	" Sensible terminal inside neovim
	Plug 'akinsho/toggleterm.nvim'

	" Zen Mode
	Plug 'folke/twilight.nvim'
	Plug 'folke/zen-mode.nvim'

endif

" Git common settings
Plug 'tpope/vim-fugitive'
if !has('nvim')
	Plug 'airblade/vim-gitgutter'
else
	Plug 'lewis6991/gitsigns.nvim'
endif

" Bufferline
if !has('nvim')
	Plug 'ap/vim-buftabline'
else
	Plug 'akinsho/bufferline.nvim', { 'tag': '*' }
endif

call plug#end()

" ---------------------------------------------------
"		   Plugin settings
" ---------------------------------------------------

" Vim-hardtime settings:
let g:hardtime_default_on = 1
let g:hardtime_maxcount = 2
let g:hardtime_allow_different_key = 1

" Minimap settings
let g:minimap_width = 10
let g:minimap_auto_start = 0
let g:minimap_auto_start_win_enter = 1

" ---------------------------------------------------
"		       Keymaps
" ---------------------------------------------------

nnoremap ]q :cnext<cr>
nnoremap [q :cprev<cr>
nnoremap ]Q :clast<cr>
nnoremap [Q :cfirst<cr>

nnoremap ]b :bnext<cr>
nnoremap [b :bprev<cr>
nnoremap ]B :blast<cr>
nnoremap [B :bfirst<cr>

" ---------------------------------------------------
"		    Leader keymaps
" ---------------------------------------------------

" set leader
let mapleader = ","

" <leader>v - open .vimrc
nmap <leader>v :e $MYVIMRC<CR>

" <leader>n - absolute, relative or no line number switch
function! NumberToggle()
  if(&relativenumber == 1)
    set norelativenumber number
  else
    if(&number == 1)
      set nonumber norelativenumber
    else
      set number relativenumber
    endif
  endif
endfunc
nnoremap <leader>n :call NumberToggle()<cr>

" <leader>p - show path to current file
nmap <leader>p :echo expand('%:p')<cr>

" <leader>s - split lines by whitespace
nmap <leader>s :s/\s\+/\r/g<cr>:noh<cr><cr>

" <leader>q - close single file
nmap <leader>q :Bdelete<cr>

" <leader>d - show git diff
nmap <leader>gd :Git difftool<cr>

" <leader>c - show git diff --cached
nmap <leader>gc :Git difftool --cached<cr>

" <leader>m - toggle minimap
nmap <leader>m :MinimapToggle<cr>
